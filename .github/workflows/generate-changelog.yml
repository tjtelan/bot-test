name: Generate CHANGELOG.md

on:
  workflow_call:
    inputs:
      event_name:
        required: true
        type: string
      pr_number:
        required: true
        type: string
  workflow_dispatch:

env:
  CHANGELOG_FILENAME: CHANGELOG.md

jobs:
  print_inputs:
    name: Print the inputs to the workflow
    runs-on: ubuntu-latest
    steps:
      - name: Print
        run: |
          echo event name: ${{ inputs.event_name }}
          echo pr number: ${{ inputs.pr_number }}

  get_pr_info:
    name: Get the PR branch name and issue number
    needs: print_inputs
    outputs:
      pr_branch: ${{ steps.pr_info.outputs.name }}
      pr_number: ${{ steps.pr_info.outputs.number }}
      pr_title: ${{ steps.pr_info.outputs.title }}
    permissions: read-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # This will only work in PRs
      - name: Get PR info from pull request event
        if: inputs.event_name == 'pull_request'
        id: info
        uses: Brymastr/pr-info-action@v1

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1.2.1

      # TODO: figure this out when bors gets here
      - name: Set outputs
        if: inputs.event_name == 'pull_request'
        run: |
          echo "PR_BRANCH=${{ steps.info.outputs.head_branch}}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ steps.info.outputs.number}}" >> $GITHUB_ENV
          echo "PR_TITLE=${{ steps.info.outputs.title}}" >> $GITHUB_ENV

      - name: Get PR info from push event
        if: inputs.event_name == 'push'
        run: |
          echo "PR_BRANCH='$(git rev-parse --abbrev-ref HEAD)'" >> $GITHUB_ENV
          echo "PR_BRANCH='$(git rev-parse --abbrev-ref HEAD)'"
          echo "PR_NUMBER='${{ inputs.pr_number }}'" >> $GITHUB_ENV
          echo "PR_NUMBER='${{ inputs.pr_number }}'"

          echo '${{ github.event.head_commit.message }}' > /tmp/pr-title-tmp
          cat /tmp/pr-title-tmp | head -1 > /tmp/pr-title
          echo PR_TITLE="$(cat /tmp/pr-title)" >> $GITHUB_ENV
          echo PR_TITLE="$(cat /tmp/pr-title)"

          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh pr checkout ${{ inputs.pr_number }}

      - name: Set outputs
        id: pr_info
        run: |
          echo "::set-output name=name::$PR_BRANCH"
          echo "pr branch is: $PR_BRANCH"

          echo "::set-output name=number::$PR_NUMBER"
          echo "pr number is: $PR_NUMBER"

          echo "::set-output name=title::$PR_TITLE"
          echo "pr title is: $PR_TITLE"

  ## If this is staging, check if the Changelog is up to date first
  ## if not, update it. This will end up with Bors cancelling the test
  ## Comment in PR to restart the test
  #  changelog_premerge_check:
  #    name: Check if Changelog is up to date before running merge CI
  #    runs-on: ubuntu-latest
  #    steps:

  # If event is workflow_dispatch, just add note that CHANGELOG.md was updated
  # If event is workflow_call, then

  # Check if this is PR run or a Bors staging run
  # If PR run, we can reuse the title and PR number
  # Otherwise, we will reuse the commit message

  generate_changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    needs: get_pr_info
    #outputs:
    #  needs-commit: ${{steps.repo-check.outputs.result}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure git user
        run: |
          git status
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1.2.1

      #- name: Add updates and rewrite commit message to branch ${{ env.GIT_BRANCH_NAME }}
      #  run: |
      #    git reset --soft HEAD~1

      #    # This add is important in event CHANGELOG.md doesn't exist
      #    git add CHANGELOG.md

      #    # Warn: github.event.head_commit.message empty if job started via workflow_dispatch
      #    git commit --all --message "${{ github.event.head_commit.message }}

      #    Update CHANGELOG.md and/or MSRV badge from Github Actions
      #    [actions skip]"
      #    git status
      #    git log -5

      - name: Simulate merge for changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #if: needs.generate_changelog.outputs.needs-commit == 'true'
        #env:
        #  defaultBranch: ${{ github.event.repository.default_branch }}
        #  prNumber: ${{ env.PR_NUMBER }}
        #  prTitle: ${{ env.PR_TITLE }}
        run: |
          gh pr checkout ${{ needs.get_pr_info.outputs.pr_number }}
          git pull
          git commit --all --allow-empty -m "${{ needs.get_pr_info.outputs.pr_title }} (#${{ needs.get_pr_info.outputs.pr_number }})"
          git log -5

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose
        env:
          OUTPUT: ${{ env.CHANGELOG_FILENAME }}
      - name: Print the changelog
        run: cat "${{ steps.git-cliff.outputs.changelog }}"
      - name: Upload generated CHANGELOG
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CHANGELOG_FILENAME }}
          path: ${{ env.CHANGELOG_FILENAME }}
          retention-days: 1

      - name: Reset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git reset HEAD --hard
          gh pr checkout ${{ needs.get_pr_info.outputs.pr_number }}

      ## Test if CHANGELOG.md needs to be updated
      #- name: Test if ${{ env.CHANGELOG_FILENAME }} needs updating in repo
      #  id: repo-check
      #  run: |
      #    git add $CHANGELOG_FILENAME
      #    git status
      #    FILES_ADDED=$(git diff --cached --name-only | grep --count $CHANGELOG_FILENAME)
      #    echo found #$FILES_ADDED files changed

      #    if [[ "$FILES_ADDED" -eq 1 ]]; then
      #      echo "Need to update $CHANGELOG_FILENAME"
      #      git commit -m "Updating $CHANGELOG_FILENAME [actions skip]"
      #      #echo "::set-output name=result::true"
      #    else
      #      echo "No $CHANGELOG_FILENAME changes to commit"
      #      #echo "::set-output name=result::false"
      #    fi

  commit_changelog:
    name: Commit updates
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs:
      - get_pr_info
      - generate_changelog
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Get GH App token
        id: app
        uses: getsentry/action-github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      #- name: Get GH App token
      #  id: app
      #  uses: machine-learning-apps/actions-app-token@0.21
      #  with:
      #    APP_PEM: ${{ secrets.APP_PRIVATE_KEY }}
      #    APP_ID: ${{ secrets.APP_ID }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      - name: Configure git user
        run: |
          git status
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1.2.1

      #- name: Checkout
      #  uses: actions/checkout@v3
      #  with:
      #    fetch-depth: 0
      #    token: ${{ secrets.GITHUB_TOKEN }}

      #- name: Git branch name
      #  id: git-branch-name
      #  uses: EthanSK/git-branch-name-action@v1

      - name: Checkout PR branch
        env:
          GH_TOKEN: ${{ steps.app.outputs.token }}
        run: |
          gh pr checkout ${{ needs.get_pr_info.outputs.pr_number }}
          ls
          git status

      - name: Download ${{ env.CHANGELOG_FILENAME }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.CHANGELOG_FILENAME }}
          path: .

      - name: Check repo
        run: |
          ls
          git status

      #- name: Git branch name
      #  id: git-branch-name
      #  uses: EthanSK/git-branch-name-action@v1

      #- name: Commit ${{ env.CHANGELOG_FILENAME }} to repo
      #  if: needs.generate_changelog.output.needs-commit == 'true'
      #  run: |
      #    gh auth login < ${{ secrets.GITHUB_TOKEN }}
      #    gh pr checkout ${{ inputs.pr_number }}

      #    git add ${{ env.CHANGELOG_FILENAME }}
      #    git commit -m "Updating $CHANGELOG_FILENAME [actions skip]"
      #    git push

      - name: Commit ${{ env.CHANGELOG_FILENAME }} to repo
        uses: stefanzweifel/git-auto-commit-action@v4.14.1
        with:
          commit_message: "Updating ${{ env.CHANGELOG_FILENAME }} [actions skip]"

      - name: Add PR Comment
        env:
          GH_TOKEN: ${{ steps.app.outputs.token }}
        run: |
          printf "Updating changelog before staging build.\nbors r+" | gh pr comment ${{ needs.get_pr_info.outputs.pr_number }} --body-file -

      #- name: Add PR Comment
      #  uses: mshick/add-pr-comment@v1
      #  with:
      #    message: |
      #      Updating changelog before staging build
      #      bors r+
      #    repo-token: ${{ steps.app.outputs.token }}
      #    repo-token-user-login: "github-actions[bot]"
